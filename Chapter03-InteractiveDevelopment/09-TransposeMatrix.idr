module TransposeMatrix

import Data.Vect

%default total

-- This was fully generated by the IDE!!!
transpose' : (x : Vect c a) -> (xsTransposed : Vect c (Vect len a)) -> Vect c (Vect (S len) a)
transpose' []        []        = []
transpose' (x :: xs) (y :: ys) = (x :: y) :: transpose' xs ys

transposeMatrix : Vect r (Vect c a) -> Vect c (Vect r a)
transposeMatrix []        = replicate _ []
transposeMatrix (x :: xs) = let xsTransposed = transposeMatrix xs in
                            transpose' x xsTransposed

transposeMatrix' : Vect r (Vect c a) -> Vect c (Vect r a)
transposeMatrix' []        = replicate _ []
transposeMatrix' (x :: xs) = zipWith (::) x (transposeMatrix' xs)
